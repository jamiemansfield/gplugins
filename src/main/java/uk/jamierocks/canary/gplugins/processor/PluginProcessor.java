/*
 * This file is part of gplugins, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2017, Jamie Mansfield <https://www.jamierocks.uk/>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package uk.jamierocks.canary.gplugins.processor;

import static javax.tools.StandardLocation.CLASS_OUTPUT;

import uk.jamierocks.canary.gplugins.Plugin;

import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Properties;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

@SupportedAnnotationTypes("org.neptunepowered.lib.plugin.Plugin")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
public class PluginProcessor extends AbstractProcessor {

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(Plugin.class)) {
            if (annotatedElement.getKind() != ElementKind.CLASS) {
                this.error("Only classes can be annotated with @Plugin", annotatedElement);
                return false;
            }

            final TypeElement pluginElement = (TypeElement) annotatedElement;
            final Plugin plugin = pluginElement.getAnnotation(Plugin.class);

            // Check plugin name
            if (plugin.name().isEmpty()) {
                this.error("The plugin name cannot be empty!", annotatedElement);
                return false;
            }

            // Lets create the Canary.inf
            final Properties props = new Properties();
            props.setProperty("main-class", pluginElement.getQualifiedName().toString());
            props.setProperty("name", plugin.name());
            if (!plugin.version().isEmpty()) {
                props.setProperty("version", plugin.version());
            }
            if (!plugin.author().isEmpty()) {
                props.setProperty("author", plugin.author());
            }
            props.setProperty("language", "neptune");
            if (plugin.enableEarly()) {
                props.setProperty("enable-early", "true");
            }
            if (plugin.dependencies().length != 0) {
                props.setProperty("dependencies", this.getDependencies(plugin.dependencies()));
            }

            try (BufferedWriter writer
                    = new BufferedWriter(this.processingEnv.getFiler().createResource(CLASS_OUTPUT, "", "Canary.inf").openWriter())) {
                props.store(writer, "Generated by NeptuneLib");
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }

            // There should only ever be one Plugin
            return true;
        }

        return false;
    }

    /**
     * Gets the dependency string for an array of dependencies.
     *
     * @param dependencies The dependency array
     * @return The dependency string
     */
    private String getDependencies(String[] dependencies) {
        final StringBuilder builder = new StringBuilder();

        for (int i = 0; i <= dependencies.length; i++) {
            builder.append(dependencies[i]);

            if (i != dependencies.length) {
                builder.append(",");
            }
        }

        return builder.toString();
    }

    /**
     * Convenience method for printing an error message.
     *
     * @param message The message
     * @param element The element
     */
    private void error(String message, Element element) {
        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, message, element);
    }

}
